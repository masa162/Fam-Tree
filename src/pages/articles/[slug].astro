---
import { getCollection, getEntryBySlug } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";

export async function getStaticPaths() {
  const articles = await getCollection("articles");
  return articles.map((article) => ({
    params: { slug: article.slug },
  }));
}

const { slug }   = Astro.params;
const article    = await getEntryBySlug("articles", slug);

if (!article) throw new Error(`記事が見つかりません: ${slug}`);

const { title, description = "", pubDate, tags = [], heroImage, image, author } = article.data;
const { Content } = await article.render();

// すべての記事を取得し、公開日でソート
const allArticles = (await getCollection("articles")).sort(
  (a, b) => new Date(a.data.pubDate).valueOf() - new Date(b.data.pubDate).valueOf() // 古い順にソート
);

// 現在の記事のインデックスを見つける
const currentIndex = allArticles.findIndex((art) => art.slug === slug);

// 前後の記事を取得
const prevArticle = currentIndex > 0 ? allArticles[currentIndex - 1] : null;
const nextArticle = currentIndex < allArticles.length - 1 ? allArticles[currentIndex + 1] : null;
---

<BaseLayout
  title={title}
  description={description}
  image={heroImage ?? image ?? "/ogp.png"}
>
  <article class="prose prose-neutral dark:prose-invert max-w-3xl mx-auto px-6 py-12 overflow-x-auto">
    <header class="mb-8">
      <h1 class="text-4xl font-extrabold leading-tight mb-2">{title}</h1>

      {pubDate && (
        <p class="text-sm text-gray-500 dark:text-gray-400 mb-2">
          公開日: {new Date(pubDate).toLocaleDateString("ja-JP")}
        </p>
      )}

      {author && (
        <p class="text-sm text-gray-500 dark:text-gray-400 mb-2">
          著者: {author}
        </p>
      )}

      {tags.length > 0 && (
        <div class="flex flex-wrap gap-2">
          {tags.map((tag) => (
            <a href={`/tags/${tag}`} class="badge badge-outline" ={tag}>
              {tag}
            </a>
          ))}
        </div>
      )}
    </header>

    <!-- Markdown 本文 -->
    <Content />

    <div class="divider my-8"></div>

    <div class="flex justify-between items-center mt-8">
      <div>
        {prevArticle && (
          <a href={`/articles/${prevArticle.slug}/`} class="btn btn-outline btn-sm">
            ← {prevArticle.data.title}
          </a>
        )}
      </div>
      <div>
        {nextArticle && (
          <a href={`/articles/${nextArticle.slug}/`} class="btn btn-outline btn-sm">
            {nextArticle.data.title} →
          </a>
        )}
      </div>
    </div>
  </article>
</BaseLayout>
